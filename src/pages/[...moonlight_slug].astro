---
import SubCollectionPageLayout from '../layouts/moonlight/SubCollectionPageLayout.astro';
import { HomeBreadcrumb } from '../lib';
import { itemIconLookup, itemTextClassLookup } from '../lib/collections/helpers';
import type { MoonlightPagePropsEntry } from '../lib/moonlight';
import { MOONLIGHT_CONFIG, type MoonlightCollection } from '../lib/moonlight/config';
import { moonlightGetStaticPathsEntries } from '../lib/moonlight/routing';
import type { LinkT } from '../lib/types';

/* Astro dynamic page paths */
export async function getStaticPaths() {
  return moonlightGetStaticPathsEntries(MOONLIGHT_CONFIG);
}

type Props = MoonlightPagePropsEntry<MoonlightCollection>;

const collectionName = Astro.props.item.collectionName;
const rootPathTitle = MOONLIGHT_CONFIG[collectionName]?.rootPathTitle!;
const rootPathUrl = `/${collectionName}/`;

// --------------------------------------------------------------------------
const indexBreadcrumb: LinkT = {
  title: rootPathTitle,
  url: rootPathUrl,
  Icon: itemIconLookup(collectionName),
  textClass: itemTextClassLookup(collectionName),
};
const indexBreadcrumbs: ReadonlyArray<LinkT> = [HomeBreadcrumb, indexBreadcrumb];
const breadcrumbs: ReadonlyArray<LinkT> = indexBreadcrumbs.concat(
  Astro.props.breadcrumbNavigation.map((x) => ({
    title: x.entry.data.title,
    url: x.entry.data.navigable ? `${rootPathUrl}${x.entry.slug}` : undefined,
  }))
);

const pageTitle = breadcrumbs
  .slice(2)
  .map((b) => b.title)
  .join(' / ');
---

<SubCollectionPageLayout
  pageTitle={pageTitle}
  breadcrumbs={breadcrumbs}
  kind={Astro.props.kind}
  subCollectionNavigation={Astro.props.subCollectionNavigation}
  prevItem={Astro.props.prevItem}
  nextItem={Astro.props.nextItem}
  Content={Astro.props.Content}
  headingGroups={Astro.props.headingGroups}
/>
