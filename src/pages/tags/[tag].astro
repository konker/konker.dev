---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from "../../components/BlogPost.astro";
import { TAG_COLLECTIONS } from '../../lib/collections';
import type {  TagCollection } from '../../lib/collections';
import type { TagEntryT } from '../../lib/types';

type Props = {
    readonly tag: string;
    readonly entries: Array<TagEntryT<TagCollection>>;
}

export async function getStaticPaths() {
  const allEntries = await Promise.all(TAG_COLLECTIONS.map(collection => getCollection(collection)));
  const tagEntries = allEntries.reduce((acc, entries, i) => {
    const collection: TagCollection = TAG_COLLECTIONS[i]!
    const x = entries.map((entry): TagEntryT<TagCollection> => ({
      entry,
      collection
    }));
    return [...acc, ...x];
  }, [] as Array<TagEntryT<TagCollection>>);

  const uniqueTags = [...new Set(tagEntries.map((tagEntry) => tagEntry.entry.data.tags).flat())];

  return uniqueTags.map((tag) => {
    const filteredTagEntries = tagEntries.filter((tagEntry) => tagEntry.entry.data.tags.includes(tag));
    return {
      params: { tag },
      props: { entries: filteredTagEntries },
    };
  });
}

const { tag } = Astro.params;
const { entries } = Astro.props;
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {entries.map((tagEntry) => <BlogPost url={`/${tagEntry.collection}/${tagEntry.entry.slug}/`} title={tagEntry.entry.data.title} />)}
  </ul>
</BaseLayout>
