---
import { TAG_COLLECTIONS } from '../../lib/collections';
import { itemIconLookup, itemTextClassLookup } from '../../lib/collections/helpers';
import { tagsGetAllCollectionTagEntries } from '../../lib/collections/tags';

import TagLinkLayout from '../../layouts/tags/TagLinkLayout.astro';
import { HomeBreadcrumb } from '../../lib';
import type { TagCollection } from '../../lib/collections';
import type { TagEntry } from '../../lib/collections/tags';
import { tagsGetAllCollectionTags } from '../../lib/collections/tags';
import type { LinkT } from '../../lib/types';

interface Props {
  readonly tag: string;
  readonly entries: Array<TagEntry<TagCollection>>;
}

// --------------------------------------------------------------------------
export async function getStaticPaths() {
  const tagEntries = await tagsGetAllCollectionTagEntries(TAG_COLLECTIONS);
  const { tags } = await tagsGetAllCollectionTags(TAG_COLLECTIONS);

  return tags.map(({ tag }) => {
    const filteredTagEntries = tagEntries.filter((tagEntry) => tagEntry.entry.data.tags.includes(tag));
    return {
      params: { tag },
      props: { entries: filteredTagEntries },
    };
  });
}

// --------------------------------------------------------------------------
const { tag } = Astro.params;
const indexBreadcrumb: LinkT = {
  title: 'Tags',
  url: '/tags/',
  Icon: itemIconLookup('tags'),
  textClass: itemTextClassLookup('tags'),
};
const breadcrumbs: ReadonlyArray<LinkT> = [HomeBreadcrumb, indexBreadcrumb, { title: tag, url: `/tags/${tag}/` }];

// --------------------------------------------------------------------------
const { entries } = Astro.props;
const pageTitle = `Tag: #${tag}`;
const intro = `This is a collection of all the content tagged <code>#${tag}</code>`;
---

<TagLinkLayout
  pageTitle={pageTitle}
  breadcrumbs={breadcrumbs}
  intro={intro}
  tagEntries={entries}
  titleIconName="tag"
  itemIconName="tag"
/>
